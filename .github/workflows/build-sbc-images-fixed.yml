name: Build SBC Images (Fixed)

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build'
        required: true
        default: 'rpi4-arm64'
        type: choice
        options:
        - rpi4-arm64
        - rpi4-arm32
        - rpi-zero2
        - ubuntu-arm64

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Generate version
        id: version
        run: |
          VERSION="sbc-$(date +%Y%m%d)-${GITHUB_SHA:0:8}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
          
      - name: Free disk space
        run: |
          echo "Space before cleanup:"
          df -h
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache || true
          sudo apt-get autoremove -y || true
          sudo apt-get autoclean || true
          echo "Space after cleanup:"
          df -h
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            wget unzip xz-utils parted kpartx e2fsprogs dosfstools \
            qemu-user-static binfmt-support bc file util-linux
            
      - name: Build image
        run: |
          echo "Building ${{ github.event.inputs.platform }} image..."
          
          chmod +x build-pi-image.sh
          mkdir -p logs
          
          # Run build with logging
          if ! timeout 120m ./build-pi-image.sh --platform=${{ github.event.inputs.platform }} 2>&1 | tee logs/build.log; then
            echo "Build failed or timed out. Last 50 lines:"
            tail -50 logs/build.log
            exit 1
          fi
          
      - name: Package results
        run: |
          mkdir -p artifacts
          
          # Find built images
          find pi-build/ -name "*.img" -o -name "*.img.xz" | while read img; do
            echo "Processing: $img"
            
            # Compress if needed
            if [[ ! "$img" =~ \.xz$ ]]; then
              xz -9 "$img"
              img="$img.xz"
            fi
            
            # Generate standard name
            basename_img=$(basename "$img" .img.xz)
            final_name="collatz-network-${{ github.event.inputs.platform }}-${{ steps.version.outputs.version }}.img.xz"
            
            cp "$img" "artifacts/$final_name"
            cd artifacts
            sha256sum "$final_name" > "${final_name}.sha256"
            cd ..
            
            echo "âœ“ Created: $final_name"
          done
          
          ls -lh artifacts/ || echo "No artifacts created"
          
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbc-image-${{ github.event.inputs.platform }}
          path: |
            artifacts/
            logs/
          retention-days: 30
          
      - name: Create summary
        if: always()
        run: |
          echo "## SBC Build Results" >> $GITHUB_STEP_SUMMARY
          echo "**Platform:** ${{ github.event.inputs.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -d artifacts ]; then
            echo "**Artifacts:**" >> $GITHUB_STEP_SUMMARY
            ls -lh artifacts/ >> $GITHUB_STEP_SUMMARY || echo "None" >> $GITHUB_STEP_SUMMARY
          fi