name: Build Multi-Platform SBC Images

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (e.g., v1.0.0)
    branches:
      - master  # Also trigger on master branch pushes
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering
    inputs:
      platforms:
        description: 'Comma-separated list of platforms to build (or "all")'
        required: false
        default: 'all'
        type: string
      create_release:
        description: 'Create GitHub release with built images'
        required: false
        default: true
        type: boolean

env:
  # Platform configurations  
  PLATFORMS: 'rpi4-arm64,rpi4-arm32,rpi3-arm64,rpi3-arm32,rpi-zero2,rpi-legacy,ubuntu-arm64,ubuntu-arm32'

jobs:
  # Job to determine what platforms to build
  setup:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.platforms.outputs.platforms }}
      version: ${{ steps.version.outputs.version }}
      is_release: ${{ steps.version.outputs.is_release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Determine platforms to build
        id: platforms
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            REQUESTED="${{ github.event.inputs.platforms }}"
            if [[ "$REQUESTED" == "all" || -z "$REQUESTED" ]]; then
              PLATFORMS_JSON=$(echo '${{ env.PLATFORMS }}' | jq -Rc 'split(",") | map(select(. != ""))')
            else
              PLATFORMS_JSON=$(echo "$REQUESTED" | jq -Rc 'split(",") | map(select(. != ""))')
            fi
          else
            # For tags and releases, build all platforms
            PLATFORMS_JSON=$(echo '${{ env.PLATFORMS }}' | jq -Rc 'split(",") | map(select(. != ""))')
          fi
          echo "platforms=$PLATFORMS_JSON" >> $GITHUB_OUTPUT
          echo "Building platforms: $PLATFORMS_JSON"
          
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
            IS_RELEASE="true"
          elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
            IS_RELEASE="true"
          else
            VERSION="dev-$(date +%Y%m%d)-${GITHUB_SHA:0:8}"
            IS_RELEASE="false"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT
          echo "Version: $VERSION, Release: $IS_RELEASE"

  # Build job matrix for each platform
  build:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.setup.outputs.platforms) }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper git operations
          
      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            wget unzip xz-utils parted kpartx e2fsprogs dosfstools \
            qemu-user-static binfmt-support bc file util-linux
          
          # Enable ARM emulation for cross-platform builds
          sudo update-binfmts --enable qemu-arm
          sudo update-binfmts --enable qemu-aarch64
          
      - name: Free up disk space
        run: |
          # Remove unnecessary packages to free up space for image building
          sudo apt-get remove -y \
            azure-cli \
            google-chrome-stable \
            firefox \
            powershell \
            mono-devel \
            || true
          sudo apt-get autoremove -y
          sudo apt-get autoclean
          
          # Show available space
          df -h
          
      - name: Build ${{ matrix.platform }} image
        id: build
        run: |
          echo "Building image for platform: ${{ matrix.platform }}"
          
          # Create output directory
          mkdir -p artifacts
          
          # Run the build script
          chmod +x build-pi-image.sh
          ./build-pi-image.sh --platform=${{ matrix.platform }}
          
          # Find the built image
          IMAGE_FILE=$(find pi-build/${{ matrix.platform }}/ -name "*.img" | head -1)
          if [[ -z "$IMAGE_FILE" ]]; then
            echo "ERROR: No image file found for ${{ matrix.platform }}"
            exit 1
          fi
          
          # Compress if not already compressed
          if [[ ! "$IMAGE_FILE" =~ \.xz$ ]]; then
            echo "Compressing image..."
            xz -9 -v "$IMAGE_FILE"
            IMAGE_FILE="${IMAGE_FILE}.xz"
          fi
          
          # Move to artifacts directory with standardized name
          ARTIFACT_NAME="collatz-network-${{ matrix.platform }}-${{ needs.setup.outputs.version }}.img.xz"
          mv "$IMAGE_FILE" "artifacts/$ARTIFACT_NAME"
          
          # Generate checksums
          cd artifacts
          sha256sum "$ARTIFACT_NAME" > "${ARTIFACT_NAME}.sha256"
          
          echo "image_file=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "✓ Built: $ARTIFACT_NAME"
          
          # Show final file info
          ls -lh "$ARTIFACT_NAME"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: collatz-${{ matrix.platform }}-image
          path: artifacts/
          retention-days: 30
          
      - name: Test image integrity
        run: |
          cd artifacts
          echo "Testing image integrity..."
          
          # Verify compressed file
          xz -t *.img.xz
          echo "✓ Image compression is valid"
          
          # Verify checksum
          sha256sum -c *.sha256
          echo "✓ Checksum verification passed"

  # Job to create release with all built images
  release:
    needs: [setup, build]
    runs-on: ubuntu-latest
    if: needs.setup.outputs.is_release == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/
          
      - name: Prepare release assets
        run: |
          mkdir -p release-files
          
          # Collect all built images and checksums
          find release-artifacts/ -name "*.img.xz" -exec cp {} release-files/ \;
          find release-artifacts/ -name "*.sha256" -exec cp {} release-files/ \;
          
          # Create a combined checksums file
          cd release-files
          cat *.sha256 > ALL-CHECKSUMS.sha256
          
          # Create installation guide
          cat > INSTALLATION-GUIDE.md << 'EOF'
          # Collatz Network - SBC Images Installation Guide
          
          ## Quick Start
          
          1. **Download** the appropriate image for your device
          2. **Verify** the download using the provided SHA256 checksum
          3. **Flash** to SD card using Etcher or dd
          4. **Boot** your device and wait for automatic setup
          5. **Connect** via SSH and run the Collatz Network
          
          ## Device Compatibility
          
          | Image File | Compatible Devices | Architecture |
          |------------|-------------------|--------------|
          | `collatz-network-rpi4-arm64-*.img.xz` | Raspberry Pi 4, Pi 400, CM4 | 64-bit ARM |
          | `collatz-network-rpi4-arm32-*.img.xz` | Raspberry Pi 4, Pi 400, CM4 | 32-bit ARM |
          | `collatz-network-rpi-zero2-*.img.xz` | Raspberry Pi Zero 2 W | 64-bit ARM |
          | `collatz-network-rpi-legacy-*.img.xz` | Raspberry Pi 1, 2, 3, Zero | 32-bit ARM |
          | `collatz-network-ubuntu-arm64-*.img.xz` | Orange Pi, Rock Pi, Odroid (64-bit) | 64-bit ARM |
          | `collatz-network-ubuntu-arm32-*.img.xz` | Older Orange Pi, Rock Pi models | 32-bit ARM |
          
          ## Flashing Instructions
          
          ### Using Etcher (Recommended)
          1. Download [Etcher](https://www.balena.io/etcher/)
          2. Select the `.img.xz` file (no need to extract)
          3. Select your SD card
          4. Flash!
          
          ### Using Command Line (Linux/macOS)
          ```bash
          # Verify checksum
          sha256sum -c collatz-network-*.img.xz.sha256
          
          # Flash to SD card (replace /dev/sdX with your SD card)
          xzcat collatz-network-*.img.xz | sudo dd of=/dev/sdX bs=4M status=progress
          ```
          
          ## First Boot Setup
          
          1. **Boot Time**: First boot takes 5-10 minutes for automatic setup
          2. **SSH Access**: User `pi` (Raspberry Pi) or `ubuntu` (Ubuntu images)
          3. **Default Password**: `raspberry` (Pi) or `ubuntu` (Ubuntu)
          4. **Wi-Fi Setup**: Edit `/boot/wpa_supplicant.conf` before first boot
          
          ## Running Collatz Network
          
          ```bash
          # SSH to your device
          ssh pi@<device-ip>
          
          # Navigate to Collatz directory
          cd ~/collatz-network
          
          # Start the network interface
          python3 network_launcher.py
          
          # Create account (option 4), then start worker (option 1)
          ```
          
          ## Support
          
          - **GitHub**: https://github.com/Jaylouisw/ProjectCollatz
          - **Issues**: Report problems via GitHub Issues
          - **Documentation**: See repository README.md
          
          ## Security Notes
          
          - **Change default passwords** after first boot
          - **Enable firewall** if exposing to internet
          - **Keep software updated** with regular `git pull`
          EOF
          
          # Show what we're releasing
          echo "Release contents:"
          ls -lh
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.setup.outputs.version }}
          name: Collatz Network SBC Images ${{ needs.setup.outputs.version }}
          body: |
            # Collatz Distributed Network - Multi-Platform SBC Images
            
            Pre-built images for Single Board Computers with Collatz Network pre-installed and ready to use.
            
            ## What's Included
            - ✅ Collatz Network software pre-installed
            - ✅ IPFS daemon auto-configured  
            - ✅ Python dependencies pre-installed
            - ✅ Auto-start service configured
            - ✅ SSH enabled by default
            - ✅ Complete documentation included
            
            ## Supported Devices
            - **Raspberry Pi 4/400/CM4** (64-bit and 32-bit)
            - **Raspberry Pi Zero 2 W** (64-bit)  
            - **Raspberry Pi 1/2/3/Zero** (32-bit legacy)
            - **Orange Pi, Rock Pi, Odroid** (Ubuntu-based ARM64/ARM32)
            
            ## Quick Start
            1. Download the appropriate `.img.xz` file for your device
            2. Verify with the provided `.sha256` checksum
            3. Flash to SD card using [Etcher](https://www.balena.io/etcher/)
            4. Boot and wait for automatic setup (5-10 minutes)
            5. SSH in and run: `cd ~/collatz-network && python3 network_launcher.py`
            
            See `INSTALLATION-GUIDE.md` for detailed instructions.
            
            ## Verification
            All images include SHA256 checksums for verification. Use `sha256sum -c <file>.sha256` to verify downloads.
            
            Built from commit: ${{ github.sha }}
          files: release-files/*
          draft: false
          prerelease: ${{ contains(needs.setup.outputs.version, 'dev-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Summary job
  summary:
    needs: [setup, build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.setup.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** ${{ needs.setup.outputs.platforms }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ **All platforms built successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some builds failed. Check individual job logs.**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Built images will be available as:" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifacts** (for all builds)" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release** (for tagged versions)" >> $GITHUB_STEP_SUMMARY