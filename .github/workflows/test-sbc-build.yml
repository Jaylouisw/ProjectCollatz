name: Test SBC Build Process

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'minimal'
        type: choice
        options:
        - minimal
        - full

jobs:
  test-build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: System Information
        run: |
          echo "System Information:"
          uname -a
          echo ""
          echo "Available disk space:"
          df -h
          echo ""
          echo "Available memory:"
          free -h
          echo ""
          echo "CPU info:"
          nproc
          
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            wget unzip xz-utils parted kpartx e2fsprogs dosfstools \
            qemu-user-static binfmt-support bc file util-linux
            
      - name: Test Build Process
        run: |
          echo "Testing SBC build process..."
          
          # Make test script executable
          chmod +x test-build-sbc.sh
          
          # Run test build
          ./test-build-sbc.sh "${{ github.event.inputs.test_type }}"
          
      - name: Verify Test Results
        run: |
          echo "Verifying test results..."
          
          # Check for output files
          cd pi-build/test-build/
          
          if [ ! -f *.img.xz ]; then
            echo "ERROR: No compressed image found"
            exit 1
          fi
          
          if [ ! -f *.sha256 ]; then
            echo "ERROR: No checksum file found"  
            exit 1
          fi
          
          # Verify checksum
          sha256sum -c *.sha256
          echo "✓ Checksum verification passed"
          
          # Test decompression
          echo "Testing decompression..."
          xz -t *.img.xz
          echo "✓ Compression integrity verified"
          
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-sbc-build-${{ github.event.inputs.test_type }}
          path: pi-build/
          retention-days: 7
          
      - name: Check Original Build Script
        if: github.event.inputs.test_type == 'full'
        run: |
          echo "Testing original build script syntax..."
          
          # Check script syntax
          chmod +x build-pi-image.sh
          bash -n build-pi-image.sh
          echo "✓ Build script syntax is valid"
          
          # Show help
          ./build-pi-image.sh --help
          
          echo "Available platforms from script:"
          grep -A 20 "declare -A PLATFORMS" build-pi-image.sh || true
          
      - name: Build Summary
        if: always()
        run: |
          echo "## Test Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Type:** ${{ github.event.inputs.test_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "pi-build" ]; then
            echo "**Test Outputs:**" >> $GITHUB_STEP_SUMMARY
            find pi-build/ -name "*.img.xz" -o -name "*.sha256" | while read file; do
              echo "- $(basename "$file") ($(du -h "$file" | cut -f1))" >> $GITHUB_STEP_SUMMARY
            done
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**System Resources:**" >> $GITHUB_STEP_SUMMARY
          echo "- CPU: $(nproc) cores" >> $GITHUB_STEP_SUMMARY
          echo "- Memory: $(free -h | grep Mem | awk '{print $2}')" >> $GITHUB_STEP_SUMMARY
          echo "- Disk: $(df -h / | tail -1 | awk '{print $4}') available" >> $GITHUB_STEP_SUMMARY